package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ChartFile chart file

swagger:model chartFile
*/
type ChartFile struct {

	/* checksum

	Required: true
	Min Length: 1
	*/
	Checksum string `json:"checksum"`

	/* created

	Required: true
	*/
	Created strfmt.DateTime `json:"created"`

	/* description

	Required: true
	Min Length: 1
	*/
	Description string `json:"description"`

	/* name

	Required: true
	Min Length: 1
	*/
	Name string `json:"name"`

	/* url

	Required: true
	Min Length: 1
	*/
	URL string `json:"url"`

	/* version

	Required: true
	Min Length: 1
	*/
	Version string `json:"version"`
}

// Validate validates this chart file
func (m *ChartFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecksum(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChartFile) validateChecksum(formats strfmt.Registry) error {

	if err := validate.RequiredString("checksum", "body", string(m.Checksum)); err != nil {
		return err
	}

	if err := validate.MinLength("checksum", "body", string(m.Checksum), 1); err != nil {
		return err
	}

	return nil
}

func (m *ChartFile) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", strfmt.DateTime(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *ChartFile) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	return nil
}

func (m *ChartFile) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

func (m *ChartFile) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", string(m.URL)); err != nil {
		return err
	}

	if err := validate.MinLength("url", "body", string(m.URL), 1); err != nil {
		return err
	}

	return nil
}

func (m *ChartFile) validateVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("version", "body", string(m.Version)); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", string(m.Version), 1); err != nil {
		return err
	}

	return nil
}
