package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetChartVersionReadmeHandlerFunc turns a function with the right signature into a get chart version readme handler
type GetChartVersionReadmeHandlerFunc func(GetChartVersionReadmeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChartVersionReadmeHandlerFunc) Handle(params GetChartVersionReadmeParams) middleware.Responder {
	return fn(params)
}

// GetChartVersionReadmeHandler interface for that can handle valid get chart version readme params
type GetChartVersionReadmeHandler interface {
	Handle(GetChartVersionReadmeParams) middleware.Responder
}

// NewGetChartVersionReadme creates a new http.Handler for the get chart version readme operation
func NewGetChartVersionReadme(ctx *middleware.Context, handler GetChartVersionReadmeHandler) *GetChartVersionReadme {
	return &GetChartVersionReadme{Context: ctx, Handler: handler}
}

/*GetChartVersionReadme swagger:route GET /v1/charts/{repo}/{chartName}/versions/{version}/readme getChartVersionReadme

get Readme.md file for specific chart version

*/
type GetChartVersionReadme struct {
	Context *middleware.Context
	Handler GetChartVersionReadmeHandler
}

func (o *GetChartVersionReadme) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetChartVersionReadmeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
