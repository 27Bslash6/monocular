package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Chart chart

swagger:model chart
*/
type Chart struct {

	/* attributes

	Required: true
	*/
	Attributes *ChartAttributes `json:"attributes"`

	/* id

	Required: true
	Min Length: 1
	*/
	ID string `json:"id"`

	/* links
	 */
	Links *ChartLinks `json:"links,omitempty"`

	/* type

	Required: true
	Min Length: 1
	*/
	Type string `json:"type"`
}

// Validate validates this chart
func (m *Chart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chart) validateAttributes(formats strfmt.Registry) error {

	if m.Attributes != nil {

		if err := m.Attributes.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chart) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", string(m.ID)); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Chart) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *Chart) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", string(m.Type), 1); err != nil {
		return err
	}

	return nil
}

/*ChartLinks chart links

swagger:model ChartLinks
*/
type ChartLinks struct {

	/* latest

	Required: true
	Min Length: 1
	*/
	Latest string `json:"latest"`
}

// Validate validates this chart links
func (m *ChartLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatest(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChartLinks) validateLatest(formats strfmt.Registry) error {

	if err := validate.RequiredString("links"+"."+"latest", "body", string(m.Latest)); err != nil {
		return err
	}

	if err := validate.MinLength("links"+"."+"latest", "body", string(m.Latest), 1); err != nil {
		return err
	}

	return nil
}
